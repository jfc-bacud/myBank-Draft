#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace myBank_Draft
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MyBank")]
	public partial class databaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdmin(Admin instance);
    partial void UpdateAdmin(Admin instance);
    partial void DeleteAdmin(Admin instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertTransaction_Log(Transaction_Log instance);
    partial void UpdateTransaction_Log(Transaction_Log instance);
    partial void DeleteTransaction_Log(Transaction_Log instance);
    partial void InsertTransaction(Transaction instance);
    partial void UpdateTransaction(Transaction instance);
    partial void DeleteTransaction(Transaction instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserWallet(UserWallet instance);
    partial void UpdateUserWallet(UserWallet instance);
    partial void DeleteUserWallet(UserWallet instance);
    #endregion
		
		public databaseDataContext() : 
				base(global::myBank_Draft.Properties.Settings.Default.MyBankConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public databaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public databaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public databaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public databaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Admin> Admins
		{
			get
			{
				return this.GetTable<Admin>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Transaction_Log> Transaction_Logs
		{
			get
			{
				return this.GetTable<Transaction_Log>();
			}
		}
		
		public System.Data.Linq.Table<Transaction> Transactions
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserWallet> UserWallets
		{
			get
			{
				return this.GetTable<UserWallet>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Admins")]
	public partial class Admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Admin_ID;
		
		private string _Users_ID;
		
		private string _Admin_FirstName;
		
		private string _Admin_LastName;
		
		private string _Admin_Email;
		
		private string _Admin_Password;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdmin_IDChanging(string value);
    partial void OnAdmin_IDChanged();
    partial void OnUsers_IDChanging(string value);
    partial void OnUsers_IDChanged();
    partial void OnAdmin_FirstNameChanging(string value);
    partial void OnAdmin_FirstNameChanged();
    partial void OnAdmin_LastNameChanging(string value);
    partial void OnAdmin_LastNameChanged();
    partial void OnAdmin_EmailChanging(string value);
    partial void OnAdmin_EmailChanged();
    partial void OnAdmin_PasswordChanging(string value);
    partial void OnAdmin_PasswordChanged();
    #endregion
		
		public Admin()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admin_ID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Admin_ID
		{
			get
			{
				return this._Admin_ID;
			}
			set
			{
				if ((this._Admin_ID != value))
				{
					this.OnAdmin_IDChanging(value);
					this.SendPropertyChanging();
					this._Admin_ID = value;
					this.SendPropertyChanged("Admin_ID");
					this.OnAdmin_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Users_ID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Users_ID
		{
			get
			{
				return this._Users_ID;
			}
			set
			{
				if ((this._Users_ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsers_IDChanging(value);
					this.SendPropertyChanging();
					this._Users_ID = value;
					this.SendPropertyChanged("Users_ID");
					this.OnUsers_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admin_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Admin_FirstName
		{
			get
			{
				return this._Admin_FirstName;
			}
			set
			{
				if ((this._Admin_FirstName != value))
				{
					this.OnAdmin_FirstNameChanging(value);
					this.SendPropertyChanging();
					this._Admin_FirstName = value;
					this.SendPropertyChanged("Admin_FirstName");
					this.OnAdmin_FirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admin_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Admin_LastName
		{
			get
			{
				return this._Admin_LastName;
			}
			set
			{
				if ((this._Admin_LastName != value))
				{
					this.OnAdmin_LastNameChanging(value);
					this.SendPropertyChanging();
					this._Admin_LastName = value;
					this.SendPropertyChanged("Admin_LastName");
					this.OnAdmin_LastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admin_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Admin_Email
		{
			get
			{
				return this._Admin_Email;
			}
			set
			{
				if ((this._Admin_Email != value))
				{
					this.OnAdmin_EmailChanging(value);
					this.SendPropertyChanging();
					this._Admin_Email = value;
					this.SendPropertyChanged("Admin_Email");
					this.OnAdmin_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admin_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Admin_Password
		{
			get
			{
				return this._Admin_Password;
			}
			set
			{
				if ((this._Admin_Password != value))
				{
					this.OnAdmin_PasswordChanging(value);
					this.SendPropertyChanging();
					this._Admin_Password = value;
					this.SendPropertyChanged("Admin_Password");
					this.OnAdmin_PasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Admin", Storage="_User", ThisKey="Users_ID", OtherKey="Users_ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Admins.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Admins.Add(this);
						this._Users_ID = value.Users_ID;
					}
					else
					{
						this._Users_ID = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Category_ID;
		
		private string _Category_Desc;
		
		private string _Category_Type;
		
		private EntitySet<Transaction> _Transactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategory_IDChanging(string value);
    partial void OnCategory_IDChanged();
    partial void OnCategory_DescChanging(string value);
    partial void OnCategory_DescChanged();
    partial void OnCategory_TypeChanging(string value);
    partial void OnCategory_TypeChanged();
    #endregion
		
		public Category()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category_ID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Category_ID
		{
			get
			{
				return this._Category_ID;
			}
			set
			{
				if ((this._Category_ID != value))
				{
					this.OnCategory_IDChanging(value);
					this.SendPropertyChanging();
					this._Category_ID = value;
					this.SendPropertyChanged("Category_ID");
					this.OnCategory_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category_Desc", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Category_Desc
		{
			get
			{
				return this._Category_Desc;
			}
			set
			{
				if ((this._Category_Desc != value))
				{
					this.OnCategory_DescChanging(value);
					this.SendPropertyChanging();
					this._Category_Desc = value;
					this.SendPropertyChanged("Category_Desc");
					this.OnCategory_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category_Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Category_Type
		{
			get
			{
				return this._Category_Type;
			}
			set
			{
				if ((this._Category_Type != value))
				{
					this.OnCategory_TypeChanging(value);
					this.SendPropertyChanging();
					this._Category_Type = value;
					this.SendPropertyChanged("Category_Type");
					this.OnCategory_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Transaction", Storage="_Transactions", ThisKey="Category_ID", OtherKey="Category_ID")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Customer_ID;
		
		private string _Users_ID;
		
		private int _UserWallet_ID;
		
		private string _Customer_FirstName;
		
		private string _Customer_LastName;
		
		private string _Customer_Email;
		
		private string _Customer_Password;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomer_IDChanging(string value);
    partial void OnCustomer_IDChanged();
    partial void OnUsers_IDChanging(string value);
    partial void OnUsers_IDChanged();
    partial void OnUserWallet_IDChanging(int value);
    partial void OnUserWallet_IDChanged();
    partial void OnCustomer_FirstNameChanging(string value);
    partial void OnCustomer_FirstNameChanged();
    partial void OnCustomer_LastNameChanging(string value);
    partial void OnCustomer_LastNameChanged();
    partial void OnCustomer_EmailChanging(string value);
    partial void OnCustomer_EmailChanged();
    partial void OnCustomer_PasswordChanging(string value);
    partial void OnCustomer_PasswordChanged();
    #endregion
		
		public Customer()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_ID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Users_ID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Users_ID
		{
			get
			{
				return this._Users_ID;
			}
			set
			{
				if ((this._Users_ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsers_IDChanging(value);
					this.SendPropertyChanging();
					this._Users_ID = value;
					this.SendPropertyChanged("Users_ID");
					this.OnUsers_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserWallet_ID", DbType="Int NOT NULL")]
		public int UserWallet_ID
		{
			get
			{
				return this._UserWallet_ID;
			}
			set
			{
				if ((this._UserWallet_ID != value))
				{
					this.OnUserWallet_IDChanging(value);
					this.SendPropertyChanging();
					this._UserWallet_ID = value;
					this.SendPropertyChanged("UserWallet_ID");
					this.OnUserWallet_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Customer_FirstName
		{
			get
			{
				return this._Customer_FirstName;
			}
			set
			{
				if ((this._Customer_FirstName != value))
				{
					this.OnCustomer_FirstNameChanging(value);
					this.SendPropertyChanging();
					this._Customer_FirstName = value;
					this.SendPropertyChanged("Customer_FirstName");
					this.OnCustomer_FirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Customer_LastName
		{
			get
			{
				return this._Customer_LastName;
			}
			set
			{
				if ((this._Customer_LastName != value))
				{
					this.OnCustomer_LastNameChanging(value);
					this.SendPropertyChanging();
					this._Customer_LastName = value;
					this.SendPropertyChanged("Customer_LastName");
					this.OnCustomer_LastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Customer_Email
		{
			get
			{
				return this._Customer_Email;
			}
			set
			{
				if ((this._Customer_Email != value))
				{
					this.OnCustomer_EmailChanging(value);
					this.SendPropertyChanging();
					this._Customer_Email = value;
					this.SendPropertyChanged("Customer_Email");
					this.OnCustomer_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Customer_Password
		{
			get
			{
				return this._Customer_Password;
			}
			set
			{
				if ((this._Customer_Password != value))
				{
					this.OnCustomer_PasswordChanging(value);
					this.SendPropertyChanging();
					this._Customer_Password = value;
					this.SendPropertyChanged("Customer_Password");
					this.OnCustomer_PasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Customer", Storage="_User", ThisKey="Users_ID", OtherKey="Users_ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._Users_ID = value.Users_ID;
					}
					else
					{
						this._Users_ID = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Role_ID;
		
		private string _Role_Desc;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRole_IDChanging(string value);
    partial void OnRole_IDChanged();
    partial void OnRole_DescChanging(string value);
    partial void OnRole_DescChanged();
    #endregion
		
		public Role()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_ID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Role_ID
		{
			get
			{
				return this._Role_ID;
			}
			set
			{
				if ((this._Role_ID != value))
				{
					this.OnRole_IDChanging(value);
					this.SendPropertyChanging();
					this._Role_ID = value;
					this.SendPropertyChanged("Role_ID");
					this.OnRole_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_Desc", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Role_Desc
		{
			get
			{
				return this._Role_Desc;
			}
			set
			{
				if ((this._Role_Desc != value))
				{
					this.OnRole_DescChanging(value);
					this.SendPropertyChanging();
					this._Role_Desc = value;
					this.SendPropertyChanged("Role_Desc");
					this.OnRole_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Users", ThisKey="Role_ID", OtherKey="Role_ID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Transaction_Log")]
	public partial class Transaction_Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Log_ID;
		
		private string _Transactions_ID;
		
		private string _Users_ID;
		
		private System.Nullable<System.DateTime> _Logged_At;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLog_IDChanging(int value);
    partial void OnLog_IDChanged();
    partial void OnTransactions_IDChanging(string value);
    partial void OnTransactions_IDChanged();
    partial void OnUsers_IDChanging(string value);
    partial void OnUsers_IDChanged();
    partial void OnLogged_AtChanging(System.Nullable<System.DateTime> value);
    partial void OnLogged_AtChanged();
    #endregion
		
		public Transaction_Log()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Log_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Log_ID
		{
			get
			{
				return this._Log_ID;
			}
			set
			{
				if ((this._Log_ID != value))
				{
					this.OnLog_IDChanging(value);
					this.SendPropertyChanging();
					this._Log_ID = value;
					this.SendPropertyChanged("Log_ID");
					this.OnLog_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Transactions_ID", DbType="NVarChar(20)")]
		public string Transactions_ID
		{
			get
			{
				return this._Transactions_ID;
			}
			set
			{
				if ((this._Transactions_ID != value))
				{
					this.OnTransactions_IDChanging(value);
					this.SendPropertyChanging();
					this._Transactions_ID = value;
					this.SendPropertyChanged("Transactions_ID");
					this.OnTransactions_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Users_ID", DbType="NVarChar(20)")]
		public string Users_ID
		{
			get
			{
				return this._Users_ID;
			}
			set
			{
				if ((this._Users_ID != value))
				{
					this.OnUsers_IDChanging(value);
					this.SendPropertyChanging();
					this._Users_ID = value;
					this.SendPropertyChanged("Users_ID");
					this.OnUsers_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logged_At", DbType="DateTime")]
		public System.Nullable<System.DateTime> Logged_At
		{
			get
			{
				return this._Logged_At;
			}
			set
			{
				if ((this._Logged_At != value))
				{
					this.OnLogged_AtChanging(value);
					this.SendPropertyChanging();
					this._Logged_At = value;
					this.SendPropertyChanged("Logged_At");
					this.OnLogged_AtChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Transactions")]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Transactions_ID;
		
		private string _Users_ID;
		
		private string _Category_ID;
		
		private int _Amount;
		
		private string _Transaction_Desc;
		
		private System.DateTime _Transaction_Date;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransactions_IDChanging(string value);
    partial void OnTransactions_IDChanged();
    partial void OnUsers_IDChanging(string value);
    partial void OnUsers_IDChanged();
    partial void OnCategory_IDChanging(string value);
    partial void OnCategory_IDChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    partial void OnTransaction_DescChanging(string value);
    partial void OnTransaction_DescChanged();
    partial void OnTransaction_DateChanging(System.DateTime value);
    partial void OnTransaction_DateChanged();
    #endregion
		
		public Transaction()
		{
			this._Category = default(EntityRef<Category>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Transactions_ID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Transactions_ID
		{
			get
			{
				return this._Transactions_ID;
			}
			set
			{
				if ((this._Transactions_ID != value))
				{
					this.OnTransactions_IDChanging(value);
					this.SendPropertyChanging();
					this._Transactions_ID = value;
					this.SendPropertyChanged("Transactions_ID");
					this.OnTransactions_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Users_ID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Users_ID
		{
			get
			{
				return this._Users_ID;
			}
			set
			{
				if ((this._Users_ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsers_IDChanging(value);
					this.SendPropertyChanging();
					this._Users_ID = value;
					this.SendPropertyChanged("Users_ID");
					this.OnUsers_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category_ID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Category_ID
		{
			get
			{
				return this._Category_ID;
			}
			set
			{
				if ((this._Category_ID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategory_IDChanging(value);
					this.SendPropertyChanging();
					this._Category_ID = value;
					this.SendPropertyChanged("Category_ID");
					this.OnCategory_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Transaction_Desc", DbType="NVarChar(50)")]
		public string Transaction_Desc
		{
			get
			{
				return this._Transaction_Desc;
			}
			set
			{
				if ((this._Transaction_Desc != value))
				{
					this.OnTransaction_DescChanging(value);
					this.SendPropertyChanging();
					this._Transaction_Desc = value;
					this.SendPropertyChanged("Transaction_Desc");
					this.OnTransaction_DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Transaction_Date", DbType="Date NOT NULL")]
		public System.DateTime Transaction_Date
		{
			get
			{
				return this._Transaction_Date;
			}
			set
			{
				if ((this._Transaction_Date != value))
				{
					this.OnTransaction_DateChanging(value);
					this.SendPropertyChanging();
					this._Transaction_Date = value;
					this.SendPropertyChanged("Transaction_Date");
					this.OnTransaction_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Transaction", Storage="_Category", ThisKey="Category_ID", OtherKey="Category_ID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._Category_ID = value.Category_ID;
					}
					else
					{
						this._Category_ID = default(string);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Transaction", Storage="_User", ThisKey="Users_ID", OtherKey="Users_ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._Users_ID = value.Users_ID;
					}
					else
					{
						this._Users_ID = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Users_ID;
		
		private string _Role_ID;
		
		private EntitySet<Admin> _Admins;
		
		private EntitySet<Customer> _Customers;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsers_IDChanging(string value);
    partial void OnUsers_IDChanged();
    partial void OnRole_IDChanging(string value);
    partial void OnRole_IDChanged();
    #endregion
		
		public User()
		{
			this._Admins = new EntitySet<Admin>(new Action<Admin>(this.attach_Admins), new Action<Admin>(this.detach_Admins));
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Users_ID", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Users_ID
		{
			get
			{
				return this._Users_ID;
			}
			set
			{
				if ((this._Users_ID != value))
				{
					this.OnUsers_IDChanging(value);
					this.SendPropertyChanging();
					this._Users_ID = value;
					this.SendPropertyChanged("Users_ID");
					this.OnUsers_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_ID", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Role_ID
		{
			get
			{
				return this._Role_ID;
			}
			set
			{
				if ((this._Role_ID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRole_IDChanging(value);
					this.SendPropertyChanging();
					this._Role_ID = value;
					this.SendPropertyChanged("Role_ID");
					this.OnRole_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Admin", Storage="_Admins", ThisKey="Users_ID", OtherKey="Users_ID")]
		public EntitySet<Admin> Admins
		{
			get
			{
				return this._Admins;
			}
			set
			{
				this._Admins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Customer", Storage="_Customers", ThisKey="Users_ID", OtherKey="Users_ID")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Transaction", Storage="_Transactions", ThisKey="Users_ID", OtherKey="Users_ID")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Role", ThisKey="Role_ID", OtherKey="Role_ID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._Role_ID = value.Role_ID;
					}
					else
					{
						this._Role_ID = default(string);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Admins(Admin entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Admins(Admin entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserWallet")]
	public partial class UserWallet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserWallet_ID;
		
		private decimal _UserWallet_Balance;
		
		private string _UserWallet_Currency;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserWallet_IDChanging(int value);
    partial void OnUserWallet_IDChanged();
    partial void OnUserWallet_BalanceChanging(decimal value);
    partial void OnUserWallet_BalanceChanged();
    partial void OnUserWallet_CurrencyChanging(string value);
    partial void OnUserWallet_CurrencyChanged();
    #endregion
		
		public UserWallet()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserWallet_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserWallet_ID
		{
			get
			{
				return this._UserWallet_ID;
			}
			set
			{
				if ((this._UserWallet_ID != value))
				{
					this.OnUserWallet_IDChanging(value);
					this.SendPropertyChanging();
					this._UserWallet_ID = value;
					this.SendPropertyChanged("UserWallet_ID");
					this.OnUserWallet_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserWallet_Balance", DbType="Decimal(10,2) NOT NULL")]
		public decimal UserWallet_Balance
		{
			get
			{
				return this._UserWallet_Balance;
			}
			set
			{
				if ((this._UserWallet_Balance != value))
				{
					this.OnUserWallet_BalanceChanging(value);
					this.SendPropertyChanging();
					this._UserWallet_Balance = value;
					this.SendPropertyChanged("UserWallet_Balance");
					this.OnUserWallet_BalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserWallet_Currency", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string UserWallet_Currency
		{
			get
			{
				return this._UserWallet_Currency;
			}
			set
			{
				if ((this._UserWallet_Currency != value))
				{
					this.OnUserWallet_CurrencyChanging(value);
					this.SendPropertyChanging();
					this._UserWallet_Currency = value;
					this.SendPropertyChanged("UserWallet_Currency");
					this.OnUserWallet_CurrencyChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
